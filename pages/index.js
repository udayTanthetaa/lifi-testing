import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";

import { ConnectButton } from "@rainbow-me/rainbowkit";
import { useEffect, useState } from "react";

import { useAccount, useNetwork } from "wagmi";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
	const [tokens, setTokens] = useState("");
	const [fromTokenIndex, setFromTokenIndex] = useState("");
	const [toTokenIndex, setToTokenIndex] = useState("");
	const [routes, setRoutes] = useState("");
	const [fromAmount, setFromAmount] = useState("");

	const [selectedRoute, setSelectedRoute] = useState("");

	const { address, isConnected } = useAccount();
	const { chain } = useNetwork();

	useEffect(() => {
		const getTokens = async () => {
			const res = await fetch("/api/getTokens", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					isTestnet: true,
					chains: chain.id,
				}),
			});

			const data = await res.json();

			if (data.code === 200) {
				setTokens(data.message);
				console.log(tokens);
			}
		};

		getTokens();
	}, [chain]);

	useEffect(() => {
		const getRoutes = async () => {
			const res = await fetch("/api/getRoutes", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					isTestnet: true,
					fromChain: parseInt(chain.id),
					toChain: parseInt(chain.id),
					fromToken: tokens[parseInt(fromTokenIndex)].address,
					toToken: tokens[parseInt(toTokenIndex)].address,
					fromAddress: address,
					fromAmount: fromAmount,
				}),
			});

			const data = await res.json();
			console.log(data.message);

			setRoutes(data.message);
		};

		if (fromTokenIndex !== "" && toTokenIndex !== "" && fromAmount !== "") {
			getRoutes();
		}
	}, [fromTokenIndex, toTokenIndex, fromAmount]);

	return (
		<>
			<Head>
				<title>LiFi Testing</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main>
				<h1>LiFi Testing</h1>
				<hr />
				<button
					onClick={async (e) => {
						e.preventDefault();

						const res = await fetch("/api/getRoutes", {
							method: "POST",
							headers: {
								"Content-Type": "application/json",
							},
							body: JSON.stringify({
								isTestnet: true,
								fromChain: 5,
								toChain: 5,
								fromToken: "0x0000000000000000000000000000000000000000",
								toToken: "0x8a1cad3703e0beae0e0237369b4fcd04228d1682",
								fromAddress: "0x069D9dE7371E16F8E3CADB4B0eafFF40cd977A00",
								fromAmount: "100",
							}),
						});

						const data = await res.json();

						console.log(data.message);
					}}
				>
					Get Routes
				</button>
				<hr />
				<button
					onClick={async (e) => {
						e.preventDefault();

						const res = await fetch("/api/getChains", {
							method: "POST",
							headers: {
								"Content-Type": "application/json",
							},
							body: JSON.stringify({
								isTestnet: true,
							}),
						});

						const data = await res.json();

						console.log(data);
					}}
				>
					Get Chains
				</button>
				<hr />
				<button
					onClick={async (e) => {
						e.preventDefault();

						const res = await fetch("/api/getTokens", {
							method: "POST",
							headers: {
								"Content-Type": "application/json",
							},
							body: JSON.stringify({
								isTestnet: true,
								chains: 80001,
							}),
						});

						const data = await res.json();

						console.log(data.message);
					}}
				>
					Get Tokens
				</button>
				<hr />
				<div className="flex flex-col items-center w-full">
					<div className="flex flex-col items-center w-full max-w-3xl space-y-3">
						<ConnectButton />
						<div className="flex flex-col items-center space-y-1 ">
							<span className="text-2xl font-bold rounded-md">Tokens</span>
							<div className="flex flex-col p-3 overflow-y-scroll rounded-md w-36 max-h-52 bg-slate-100">
								{tokens === "" ? (
									<></>
								) : (
									tokens.map((token, index) => {
										return (
											<div id={index}>
												{index} - {token.symbol}
											</div>
										);
									})
								)}
							</div>
						</div>

						<div className="flex flex-row space-x-3">
							<div className="flex flex-row items-center space-x-3">
								<div className="text-xl font-bold">From Token</div>
								<input
									onChange={(e) => {
										setFromTokenIndex(e.target.value);
									}}
									type="text"
									placeholder="From Token"
									className="w-40 px-3 py-2 rounded-lg text-md bg-slate-100"
								/>
							</div>

							<div className="flex flex-row items-center space-x-3">
								<div className="text-xl font-bold">To Token</div>
								<input
									onChange={(e) => {
										setToTokenIndex(e.target.value);
									}}
									type="text"
									placeholder="To Token"
									className="w-40 px-3 py-2 rounded-lg text-md bg-slate-100"
								/>
							</div>
						</div>

						<div className="flex flex-row items-center space-x-3">
							<div className="text-xl font-bold">From Amount</div>
							<input
								onChange={(e) => {
									setFromAmount(e.target.value);
								}}
								type="text"
								placeholder="From Amount"
								className="px-3 py-2 rounded-lg text-md w-72 bg-slate-100"
							/>
						</div>

						<div className="flex flex-col items-center space-y-1 ">
							<span className="text-2xl font-bold rounded-md">Routes</span>
							<div className="flex flex-col p-3 space-y-3 rounded-md bg-slate-100">
								{routes === "" ? (
									<></>
								) : (
									routes.map((route, index) => {
										return (
											<div id={index}>
												<div className="text-xl font-bold">Route - {index}</div>
												From&nbsp;{route.fromToken.symbol} -{" "}
												{route.fromAmount / Math.pow(10, route.fromToken.decimals)}
												<br />
												To&nbsp;{route.toToken.symbol} -{" "}
												{route.toAmount / Math.pow(10, route.toToken.decimals)}
												<br />
												Min.&nbsp;{route.toToken.symbol} -{" "}
												{route.toAmountMin / Math.pow(10, route.toToken.decimals)}
											</div>
										);
									})
								)}
							</div>
						</div>

						<div className="flex flex-row items-center space-x-3">
							<div className="text-xl font-bold">Select Route</div>
							<input
								onChange={(e) => {
									setSelectedRoute(e.target.value);
								}}
								value={selectedRoute}
								type="text"
								placeholder="Select Route"
								className="px-3 py-2 rounded-lg text-md w-72 bg-slate-100"
							/>
						</div>
					</div>
				</div>
			</main>
		</>
	);
}
